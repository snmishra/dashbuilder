name: Dash Build

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository for docs'
        required: true
        type: string
      python:
        description: 'Python version'
        required: true
        type: choice
        default: '3.9'
        options:
        - '3.8'
        - '3.9'
        - '3.10'
      name:
        description: 'Name of the output'
        required: false 
        type: string
      icon:
        description: 'PNG icon path'
        type: string
        required: false
      needs_build:
        description: "Docs build requires main package build"
        type: boolean
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.event.inputs.repo }}
      NAME: ${{ github.event.inputs.name }}
      ICON: ${{ github.event.inputs.icon }}
      NEEDS_BUILD: ${{ github.event.inputs.needs_build }}
      SPHINXBUILD: sphinx-build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ github.event.inputs.python }}
      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-pypi-cache          
          path: |
            ~/.cache/pip
      - name: Build docs
        run: |
          pip install doc2dash sphinx-rtd-theme tox
          git clone --depth=1 $REPO .
          DOCDIR=$(dirname $(find doc* -name Makefile))
          if [ -f tox.ini ] && (tox -l | grep -q docs) ; then
            tox -e docs
          else
            [[ $NEEDS_BUILD == 'true' ]] && pip install -e .
            test -f $DOCDIR/requirements.txt && pip install -r $DOCDIR/requirements.txt
            make -C $DOCDIR html
          fi
          doc2dash ${NAME:+-n $NAME} ${ICON:+-i $DOCDIR/$ICON} $DOCDIR/_build/html
          tar -czf ${NAME}.tgz ${NAME}.docset
      - name: Upload docset
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME }}.tgz
          path: ${{ env.NAME }}.tgz
