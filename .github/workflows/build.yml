name: Dash Build

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      repo:
        description: 'Repository for docs'
        required: true
        type: string
      python:
        description: 'Python version'
        required: true
        type: choice
        default: '3.11'
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
      name:
        description: 'Name of the output'
        required: false
        type: string
      version:
        description: 'Version of the repo'
        required: false
        type: string
      icon:
        description: 'PNG icon path'
        type: string
        required: false
      needs_build:
        description: 'Docs build requires main package build'
        type: boolean
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Default
    env:
      REPO: ${{ github.event.inputs.repo }}
      VERSION: ${{ github.event.inputs.version }}
      NAME: ${{ github.event.inputs.name }}
      ICON: ${{ github.event.inputs.icon }}
      NEEDS_BUILD: ${{ github.event.inputs.needs_build }}
      SPHINXBUILD: sphinx-build
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_KEY }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ github.event.inputs.python }}
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pypi-cache
          path: |
            ~/.cache/pip
      - name: Checkout builder
        uses: actions/checkout@v3
      - name: Build docs
        run: |
          pip install -r requirements.txt
          python -m bin.build
      - name: Upload to JFrog
        run: |
          pip install --upgrade cloudsmith-cli
          cloudsmith push raw satya-s-open-source/zealdocsets ${VERSION:+"--version" $VERSION} ${{ env.NAME }}.tgz
          cat > ${{ env.NAME }}.xml <<-EOF
          <entry>
            <name>${{ env.NAME }}</name>
            <version>${{ env.VERSION }}</version>
            <url>https://dl.cloudsmith.io/public/satya-s-open-source/zealdocsets/raw/names/click/files/${{ env.NAME }}.tgz</url>
            <other-versions></other-versions>
          </entry>
          EOF
          cloudsmith push raw satya-s-open-source/zealdocsets ${{ env.NAME }}.xml
